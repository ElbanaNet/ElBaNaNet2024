(function () {
    qSel('#musicPlayer').innerHTML = '<div class=\'mscPl notranslate\'><div class=\'mscTc\'><div class=\'mscCv\'><transition-group :name=\'transitionName\'><div class=\'mscCvI\' v-if=\'$index === currentTrackIndex\' :style=\'{ backgroundImage:"url("+track.cover+")"}\' v-for=\'(track, $index) in tracks\' :key=\'$index\'></div></transition-group></div></div><div class=\'mscPr\' ref=\'progress\'><div v-if=\'currentTrack\'><div class=\'mscTr\'>{{currentTrack.name}}</div><div class=\'mscNa\'>{{currentTrack.artist}}</div></div><div class=\'mscPrC\'><div class=\'mscPrTm\'>{{currentTime}}</div><div class=\'mscPrBr\' @click=\'clickProgress\'><div class=\'mscPrCr\' :style=\'{width:barWidth}\'></div></div><div class=\'mscPrDu\'>{{duration}}</div></div></div><div v-cloak></div><div class=\'mscCt\'><div class=\'mscCtI\' @click=\'prevTrack\'><svg class=\'line\' viewBox=\'0 0 24 24\'><polygon points=\'19 20 9 12 19 4 19 20\'></polygon><line x1=\'5\' y1=\'19\' x2=\'5\' y2=\'5\'></line></svg></div><div class=\'mscCtI -xl js-play\' @click=\'play\'><svg v-if=\'isTimerPlaying\' class=\'line pa\' viewBox=\'0 0 24 24\'><circle cx=\'12\' cy=\'12\' r=\'10\'></circle><line x1=\'10\' y1=\'15\' x2=\'10\' y2=\'9\'></line><line x1=\'14\' y1=\'15\' x2=\'14\' y2=\'9\'></line></svg><svg v-else class=\'line pl\' viewBox=\'0 0 24 24\'><polygon points=\'5 3 19 12 5 21 5 3\'></polygon></svg></div><div class=\'mscCtI\' @click=\'nextTrack\'><svg class=\'line\' viewBox=\'0 0 24 24\'><polygon points=\'5 4 15 12 5 20 5 4\'></polygon><line x1=\'19\' y1=\'5\' x2=\'19\' y2=\'19\'></line></svg></div></div></div>', new Vue({
       el: "#musicPlayer",
       data: function () {
         return {
           audio: null,
           circleLeft: null,
           barWidth: null,
           duration: null,
           currentTime: null,
           isTimerPlaying: false,
           tracks: playerTracks,
           currentTrack: null,
           currentTrackIndex: 0,
           transitionName: null
         };
       },
       methods: {
         play: function () {
           this.audio.paused ? (this.audio.play(), this.isTimerPlaying = true) : (this.audio.pause(), this.isTimerPlaying = false);
         },
         generateTime: function () {
           var i = 100 / this.audio.duration * this.audio.currentTime;
           this.barWidth = i + "%", this.circleLeft = i + "%";
           let n = Math.floor(this.audio.duration / 60),
             e = Math.floor(this.audio.duration - 60 * n),
             s = Math.floor(this.audio.currentTime / 60),
             c = Math.floor(this.audio.currentTime - 60 * s);
           n < 10 && (n = "0" + n), e < 10 && (e = "0" + e), s < 10 && (s = "0" + s), c < 10 && (c = "0" + c), this.duration = n + ":" + e, this.currentTime = s + ":" + c;
         },
         updateBar: function (t) {
           var n = this.$refs.progress,
             e = this.audio.duration;
           let s = 100 * (t - n.offsetLeft) / n.offsetWidth;
           100 < s && (s = 100), s < 0 && (s = 0), this.barWidth = s + "%", this.circleLeft = s + "%", this.audio.currentTime = e * s / 100, this.audio.play();
         },
         clickProgress: function (t) {
           var i;
           this.isTimerPlaying = true, this.audio.pause(), this.updateBar(t.pageX);
         },
         prevTrack: function () {
           this.transitionName = 'mScaleIn', this.isShowCover = false, 0 < this.currentTrackIndex ? this.currentTrackIndex-- : this.currentTrackIndex = this.tracks.length - 1, this.currentTrack = this.tracks[this.currentTrackIndex], this.resetPlayer();
         },
         nextTrack: function () {
           this.transitionName = 'mScaleOut', this.isShowCover = false, this.currentTrackIndex < this.tracks.length - 1 ? this.currentTrackIndex++ : this.currentTrackIndex = 0, this.currentTrack = this.tracks[this.currentTrackIndex], this.resetPlayer();
         },
         resetPlayer: function () {
           this.barWidth = 0, this.circleLeft = 0, this.audio.currentTime = 0, this.audio.src = this.currentTrack.source, setTimeout(() => {
             this.isTimerPlaying ? this.audio.play() : this.audio.pause();
           }, 300);
         }
       },
       created: function () {
         var i = this;
         this.currentTrack = this.tracks[0], this.audio = new Audio(), this.audio.src = this.currentTrack.source, this.audio.ontimeupdate = function () {
           i.generateTime();
         }, this.audio.onloadedmetadata = function () {
           i.generateTime();
         }, this.audio.onended = function () {
           i.nextTrack(), this.isTimerPlaying = true;
         };
         for (let i = 0; i < this.tracks.length; i++) {
           var e = this.tracks[i];
           let t = document.createElement('link');
           t.rel = "prefetch", t.href = e.cover, t.as = "image", document.head.appendChild(t);
         }
       }
     });
   })();